{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A set of tools for writing fiction with Visual Studio Code . Get it from: Visual Studio Code Marketplace Important! This extension enters the beta stage. Version 1.0 will be relase soon. Please save all your configuration as it will contain breaking changes. Main Features \u00b6 Browse each category below, to find out more about this extension capabilites. Enhanced Editing Text Formatting Exporting/Combining automatically insert new paragraph on enter , or shift + enter solutions for writing dialogue using dialogue markers (like in some non-english languages), using either em-dash (\u2014) or other marks. autoreplace -- with \u2014 clean up extra spaces clean up extra lines fix dialogue markers, indents fix paragraph spacing fix line spacing combine multiple .md files into one single file export .md to other formats (like .doc or .docx ) (uses Pandoc ) Split files in multiple fales Using Metadata Document Statistics Other use markdown yaml metadata blocks to categorize documents parse metadata into a tree view add badges and colors in Explorer count words, phrases, pages view document word/phrase repetitions fold paragraph lines writing mode (different theme, different font size) text highlighting typewriter mode custom toolbar Installation \u00b6 More information: Browse for extensions GitHub \u00b6 Please log any issues, suggestions, bugs, questions under GitHub Issues","title":"Overview"},{"location":"#main-features","text":"Browse each category below, to find out more about this extension capabilites. Enhanced Editing Text Formatting Exporting/Combining automatically insert new paragraph on enter , or shift + enter solutions for writing dialogue using dialogue markers (like in some non-english languages), using either em-dash (\u2014) or other marks. autoreplace -- with \u2014 clean up extra spaces clean up extra lines fix dialogue markers, indents fix paragraph spacing fix line spacing combine multiple .md files into one single file export .md to other formats (like .doc or .docx ) (uses Pandoc ) Split files in multiple fales Using Metadata Document Statistics Other use markdown yaml metadata blocks to categorize documents parse metadata into a tree view add badges and colors in Explorer count words, phrases, pages view document word/phrase repetitions fold paragraph lines writing mode (different theme, different font size) text highlighting typewriter mode custom toolbar","title":"Main Features"},{"location":"#installation","text":"More information: Browse for extensions","title":"Installation"},{"location":"#github","text":"Please log any issues, suggestions, bugs, questions under GitHub Issues","title":"GitHub"},{"location":"changelog/","text":"All notable changes to this project will be documented in this file. Unreleased \u00b6 Added Add exclude and compile: false support for metadata block so, a file can be exluded from the automatic compiled script [#36] Fixes A bug that did not parse all nested indcluded files in compilation [#38] Fixed failing tests on Windows envirnoment 0.1.1 - pre-release 1 \u00b6 Unstable warning The pre-release versions are highly unstable at this moment, and for testing purposes only. Use the latest stable version ( 0.0.55 ). Some settings might not be backward compatile at this point. Added Add exclude and compile: false support for metadata block so, a file can be exluded from the automatic compiled script [#36] Upgrade minimum supported version to 1.72 Support for file nesting . Adds {\"*.md\": \"${capture}.md.txt, ${capture}.md.yml\"} pattern to explorer.fileNesting.patterns in configuration defaults. Fixes A bug that did not parse all nested indcluded files in compilation [#38] Some speed issues and loading times with the indexer Fixed failing tests on Windows envirnoment Fixed Linux/Windows Glob match pattern, on file indexer and metadata indexer Changed Changed the build tool from webpack to esbuild Changed extension display name from Markdown Fiction Writer to Fiction Writer to accomodate future language support Changed settings prefix from markdowon-fiction-writer. to fiction-writer [#28] Settings Changed: fictionWriter.statusBar.items to be of type object with checkboxes Changed settings from application scope to window scope so it can be configured per workspace as well: fictionWriter.editDialogue.marker fictionWriter.export.outputTemplate.file fictionWriter.export.outputTemplate.enabled fictionWriter.export.tocFilename fictionWriter.export.smartDeshes fictionWriter.export.skipCodeComments fictionWriter.textFormatting.* fictionWriter.metadata.keywords.colors fictionWriter.metadata.keywords.colorsCategory fictionWriter.metadata.keywords.badgesCategory fictionWriter.metadata.keywords.badges fictionWriter.metadata.categories.icons fictionWriter.metadata.categories.default fictionWriter.notes.defaultText 0.0.55 - alpha 5.5 \u00b6 Added Group Fiction writer context menu in Fiction Writer category on Explorer and on Editor Split File: Possibility to split files in multiple files, or extract selected document Fixes - Focus Mode now can highlight paragraph, or line (set up in settings) 0.0.53 - alpha 5.3 \u00b6 Status Bar: now has the possibility to show/hide specific buttons Writing Mode: Select Writing Mode theme command now previews the theme on changing selection with Up/Down arrow keys. Settings Added: markdown-fiction-writer.statusbar.items Added: markdown-fiction-writer.splitDocument.switchToNewlyCreatedDocument Changed Settings moved: markdown-fiction-writer.view.statusbar.* to markdown-fiction-writer.statusbar.* . Don't show the This Version Contains Breaking Changes.. notification message for minor alpha version changes. Fixed Fixed a bug that did not always hide status bar when changing active editor to a non-markdown editor. 0.0.52 - alpha 5.2 \u00b6 Added Keybinding: Ctrl + F11 toggles both ZenMode and Writing Mode Focus Mode: fade out all text except current text line (not editor line) Command: Select Writing Mode font size now is accessible from command pallete. Command: Select Writing Mode theme shows a selection of all installed themes to choose from. Command: Toggle Focus Mode enables/disables focus mode Settings markdown-fiction-writer.view.focusMode.opacity markdown-fiction-writer.writingMode.toggleFocusMode Changed Moved markdown-fiction-writer.view.writingMode.* settings under markdown-fiction-writer.writingMode.* 0.0.50 - alpha 5.0 \u00b6 Added Metadata: support for summary category Metadata: support for external .yml metadata file Metadata: new open file icon on Metadata View Metadata: Explorer view, various tooltip improvements (id, summary) Metadata: fade-out file decorations for additional files Notes: added support for additional .txt file containing short notes Notes: added webview for quickly editing/view-ing document related notes Smart Rename: add Rename Related command to Explorer context Smart Rename: when renaming a file, can rename all related files (with same name) Statistics: added reading speed estimation calculated at ~200 wpm General: Optimizes file indexing, to reduce disk read calls Settings : markdown-fiction-writer.notes.enabled mardkwon-fiction-writer.notes.defaultText markdown-fiction-writer.smartRename.enabled markdown-fiction-writer.smartRename.renameRelatedFiles Changes _bk folder now created under .fic folder Setting markdown-fiction-writer.metadata.defaultCategory becomes markdown-fiction-writer.metadata.categories.default Selecting an item in Metadata View does not immediately open file. The file can now be opened from the Open File icon in the view title bar Document Statistics: can be computed for any document, not only for .md files Hide unecessary commands from Command Pallete Fixes Fix: markdown formatting now skips inline metadata blocks Fix: document statistics and repetitions now skips metada block Fix a bug on Linux, that prevented opening files in external editor Fix a performance issue when Document Statistics was loading even if view was not visible. Consistent name of Writing Mode everywhere (some places still using the old Enhanced Zen Mode naming) 0.0.50 - alpha 5 \u00b6 Added Vairous bug fixes and improvements Group Fiction writer context menu in Fiction Writer category on Explorer and on Editor Split File: Possibility to split files in multiple files, or extract selected document Fixes - Focus Mode now can highlight paragraph, or line (set up in settings) 0.0.42 - alpha 4.2 \u00b6 Added Metadata: recognize the id top level metadata field Export: possibility to disable include files syntax Export: possibility to add include file errors in the exported document Export: files can be included either by filename , or by metadata.id value Export: can now search for included files in all opened documents/workspaces Settings : markdown-fiction-writer.export.include.enabled markdown-fiction-writer.export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces markdown-fiction-writer.export.include.showsErrorInOutputFile Fixed Fix some typos in documentation Fix some configuration key descriptions Fix debug flag that was showing file cache debug view 0.0.35 - alpha 3.0 \u00b6 Added Metadata: now supports yaml markdown metadata support Metadata: new metadata tree view under explorer Metadata: file colors, badges are resolved using keywords Metadata: easy array parsing (add arrays without [] ) for known categories Settings : markdown-fiction-writer.metadata.enabled markdown-fiction-writer.metadata.categories markdown-fiction-writer.metadata.categoryIconsEnabled markdown-fiction-writer.metadata.defaultCategory markdown-fiction-writer.metadata.keywords.badges markdown-fiction-writer.metadata.keywords.badgeCategory markdown-fiction-writer.metadata.keywords.badgesInFileExplorer markdown-fiction-writer.metadata.keywords.colors markdown-fiction-writer.metadata.keywords.colorCategory markdown-fiction-writer.metadata.keywords.colorsInMetadataView markdown-fiction-writer.metadata.keywords.colorsInFileExplorer Changed Updated extension icon (still work in progress) Update configuration setting descriptions (still work in progress) All main settings are now User settings (not workspace settings) various small fixes and bugs Writing Mode now is disabled when restarting editor (if closed with it enabled) Statistics view now auto-refreshes when changing text-editor is changed and on save fix Extension name Configuration Settings fix a bug where text formatting was ignoring heading Removed settings : markdown-fiction-writer.view.fileTags.enabled (replaced by markdown.fiction-writer.metadata features) markdown-fiction-writer.view.fileTags.definitions Fixed Fix disposables not disposed of properly Fix Document Statistics view not refreshing on config change 0.0.23 - alpha 2.3 \u00b6 Added Writing mode Reorganizes settings (breaking change) 0.0.21 - alpha 2.1 \u00b6 Added View: Highlight dialogue markers View: Highlight quoted dialogue View: File Tags - add small 2 letter badges to files form current directory markdown-fiction-writer.view.fileTags Major Refactorings to Disposable usage Settings : markdown-fiction-writer.format.backupBeforeEachFormat setting. It always asks before performing formatting. 0.0.17 - alpha 1.7 \u00b6 Added Export: Add SaveAs dialogue to export commands. Export: Add option to always show SaveAs dialgoue Export: Add option to change TOC filename Export: Show OpenFileDialogue when use template is enabled 0.0.11 - alpha 1.1 \u00b6 Added add writing statistics (word count, etc) 0.0.6 - alpha 0.6 \u00b6 Added add text analysis (word frequency count) 0.0.3 - alpha 0.3 \u00b6 Added add status bar buttons folding, unfolding of paragraph lines more support for one-sentence-per line 0.0.2 - alpha 0.2 \u00b6 Added add text formatting options add include .md file support using {file.md} syntax add syntax highlighting for included file 0.0.1 - alpha 0.1 \u00b6 Added add compile/export using pandoc supporting em-dash (\u2014) dialogue markers new paragraph on Shift + Enter support for one-sentence-per line Known issues \u00b6 As this plugin rebinds some keys, like: enter , shift + enter , delete , tab , backspace , it can interfere with other extensions that also overwrite this key bindings. Consider inspecting and rebinding some of them, as described here: Key Bindings for Visual Studio Code","title":"Changelog"},{"location":"changelog/#unreleased","text":"Added Add exclude and compile: false support for metadata block so, a file can be exluded from the automatic compiled script [#36] Fixes A bug that did not parse all nested indcluded files in compilation [#38] Fixed failing tests on Windows envirnoment","title":"Unreleased"},{"location":"changelog/#011-pre-release-1","text":"Unstable warning The pre-release versions are highly unstable at this moment, and for testing purposes only. Use the latest stable version ( 0.0.55 ). Some settings might not be backward compatile at this point. Added Add exclude and compile: false support for metadata block so, a file can be exluded from the automatic compiled script [#36] Upgrade minimum supported version to 1.72 Support for file nesting . Adds {\"*.md\": \"${capture}.md.txt, ${capture}.md.yml\"} pattern to explorer.fileNesting.patterns in configuration defaults. Fixes A bug that did not parse all nested indcluded files in compilation [#38] Some speed issues and loading times with the indexer Fixed failing tests on Windows envirnoment Fixed Linux/Windows Glob match pattern, on file indexer and metadata indexer Changed Changed the build tool from webpack to esbuild Changed extension display name from Markdown Fiction Writer to Fiction Writer to accomodate future language support Changed settings prefix from markdowon-fiction-writer. to fiction-writer [#28] Settings Changed: fictionWriter.statusBar.items to be of type object with checkboxes Changed settings from application scope to window scope so it can be configured per workspace as well: fictionWriter.editDialogue.marker fictionWriter.export.outputTemplate.file fictionWriter.export.outputTemplate.enabled fictionWriter.export.tocFilename fictionWriter.export.smartDeshes fictionWriter.export.skipCodeComments fictionWriter.textFormatting.* fictionWriter.metadata.keywords.colors fictionWriter.metadata.keywords.colorsCategory fictionWriter.metadata.keywords.badgesCategory fictionWriter.metadata.keywords.badges fictionWriter.metadata.categories.icons fictionWriter.metadata.categories.default fictionWriter.notes.defaultText","title":"0.1.1 - pre-release 1"},{"location":"changelog/#0055-alpha-55","text":"Added Group Fiction writer context menu in Fiction Writer category on Explorer and on Editor Split File: Possibility to split files in multiple files, or extract selected document Fixes - Focus Mode now can highlight paragraph, or line (set up in settings)","title":"0.0.55 - alpha 5.5"},{"location":"changelog/#0053-alpha-53","text":"Status Bar: now has the possibility to show/hide specific buttons Writing Mode: Select Writing Mode theme command now previews the theme on changing selection with Up/Down arrow keys. Settings Added: markdown-fiction-writer.statusbar.items Added: markdown-fiction-writer.splitDocument.switchToNewlyCreatedDocument Changed Settings moved: markdown-fiction-writer.view.statusbar.* to markdown-fiction-writer.statusbar.* . Don't show the This Version Contains Breaking Changes.. notification message for minor alpha version changes. Fixed Fixed a bug that did not always hide status bar when changing active editor to a non-markdown editor.","title":"0.0.53 - alpha 5.3"},{"location":"changelog/#0052-alpha-52","text":"Added Keybinding: Ctrl + F11 toggles both ZenMode and Writing Mode Focus Mode: fade out all text except current text line (not editor line) Command: Select Writing Mode font size now is accessible from command pallete. Command: Select Writing Mode theme shows a selection of all installed themes to choose from. Command: Toggle Focus Mode enables/disables focus mode Settings markdown-fiction-writer.view.focusMode.opacity markdown-fiction-writer.writingMode.toggleFocusMode Changed Moved markdown-fiction-writer.view.writingMode.* settings under markdown-fiction-writer.writingMode.*","title":"0.0.52 - alpha 5.2"},{"location":"changelog/#0050-alpha-50","text":"Added Metadata: support for summary category Metadata: support for external .yml metadata file Metadata: new open file icon on Metadata View Metadata: Explorer view, various tooltip improvements (id, summary) Metadata: fade-out file decorations for additional files Notes: added support for additional .txt file containing short notes Notes: added webview for quickly editing/view-ing document related notes Smart Rename: add Rename Related command to Explorer context Smart Rename: when renaming a file, can rename all related files (with same name) Statistics: added reading speed estimation calculated at ~200 wpm General: Optimizes file indexing, to reduce disk read calls Settings : markdown-fiction-writer.notes.enabled mardkwon-fiction-writer.notes.defaultText markdown-fiction-writer.smartRename.enabled markdown-fiction-writer.smartRename.renameRelatedFiles Changes _bk folder now created under .fic folder Setting markdown-fiction-writer.metadata.defaultCategory becomes markdown-fiction-writer.metadata.categories.default Selecting an item in Metadata View does not immediately open file. The file can now be opened from the Open File icon in the view title bar Document Statistics: can be computed for any document, not only for .md files Hide unecessary commands from Command Pallete Fixes Fix: markdown formatting now skips inline metadata blocks Fix: document statistics and repetitions now skips metada block Fix a bug on Linux, that prevented opening files in external editor Fix a performance issue when Document Statistics was loading even if view was not visible. Consistent name of Writing Mode everywhere (some places still using the old Enhanced Zen Mode naming)","title":"0.0.50 - alpha 5.0"},{"location":"changelog/#0050-alpha-5","text":"Added Vairous bug fixes and improvements Group Fiction writer context menu in Fiction Writer category on Explorer and on Editor Split File: Possibility to split files in multiple files, or extract selected document Fixes - Focus Mode now can highlight paragraph, or line (set up in settings)","title":"0.0.50 - alpha 5"},{"location":"changelog/#0042-alpha-42","text":"Added Metadata: recognize the id top level metadata field Export: possibility to disable include files syntax Export: possibility to add include file errors in the exported document Export: files can be included either by filename , or by metadata.id value Export: can now search for included files in all opened documents/workspaces Settings : markdown-fiction-writer.export.include.enabled markdown-fiction-writer.export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces markdown-fiction-writer.export.include.showsErrorInOutputFile Fixed Fix some typos in documentation Fix some configuration key descriptions Fix debug flag that was showing file cache debug view","title":"0.0.42 - alpha 4.2"},{"location":"changelog/#0035-alpha-30","text":"Added Metadata: now supports yaml markdown metadata support Metadata: new metadata tree view under explorer Metadata: file colors, badges are resolved using keywords Metadata: easy array parsing (add arrays without [] ) for known categories Settings : markdown-fiction-writer.metadata.enabled markdown-fiction-writer.metadata.categories markdown-fiction-writer.metadata.categoryIconsEnabled markdown-fiction-writer.metadata.defaultCategory markdown-fiction-writer.metadata.keywords.badges markdown-fiction-writer.metadata.keywords.badgeCategory markdown-fiction-writer.metadata.keywords.badgesInFileExplorer markdown-fiction-writer.metadata.keywords.colors markdown-fiction-writer.metadata.keywords.colorCategory markdown-fiction-writer.metadata.keywords.colorsInMetadataView markdown-fiction-writer.metadata.keywords.colorsInFileExplorer Changed Updated extension icon (still work in progress) Update configuration setting descriptions (still work in progress) All main settings are now User settings (not workspace settings) various small fixes and bugs Writing Mode now is disabled when restarting editor (if closed with it enabled) Statistics view now auto-refreshes when changing text-editor is changed and on save fix Extension name Configuration Settings fix a bug where text formatting was ignoring heading Removed settings : markdown-fiction-writer.view.fileTags.enabled (replaced by markdown.fiction-writer.metadata features) markdown-fiction-writer.view.fileTags.definitions Fixed Fix disposables not disposed of properly Fix Document Statistics view not refreshing on config change","title":"0.0.35 - alpha 3.0"},{"location":"changelog/#0023-alpha-23","text":"Added Writing mode Reorganizes settings (breaking change)","title":"0.0.23 - alpha 2.3"},{"location":"changelog/#0021-alpha-21","text":"Added View: Highlight dialogue markers View: Highlight quoted dialogue View: File Tags - add small 2 letter badges to files form current directory markdown-fiction-writer.view.fileTags Major Refactorings to Disposable usage Settings : markdown-fiction-writer.format.backupBeforeEachFormat setting. It always asks before performing formatting.","title":"0.0.21 - alpha 2.1"},{"location":"changelog/#0017-alpha-17","text":"Added Export: Add SaveAs dialogue to export commands. Export: Add option to always show SaveAs dialgoue Export: Add option to change TOC filename Export: Show OpenFileDialogue when use template is enabled","title":"0.0.17 - alpha 1.7"},{"location":"changelog/#0011-alpha-11","text":"Added add writing statistics (word count, etc)","title":"0.0.11 - alpha 1.1"},{"location":"changelog/#006-alpha-06","text":"Added add text analysis (word frequency count)","title":"0.0.6 - alpha 0.6"},{"location":"changelog/#003-alpha-03","text":"Added add status bar buttons folding, unfolding of paragraph lines more support for one-sentence-per line","title":"0.0.3 - alpha 0.3"},{"location":"changelog/#002-alpha-02","text":"Added add text formatting options add include .md file support using {file.md} syntax add syntax highlighting for included file","title":"0.0.2 - alpha 0.2"},{"location":"changelog/#001-alpha-01","text":"Added add compile/export using pandoc supporting em-dash (\u2014) dialogue markers new paragraph on Shift + Enter support for one-sentence-per line","title":"0.0.1 - alpha 0.1"},{"location":"changelog/#known-issues","text":"As this plugin rebinds some keys, like: enter , shift + enter , delete , tab , backspace , it can interfere with other extensions that also overwrite this key bindings. Consider inspecting and rebinding some of them, as described here: Key Bindings for Visual Studio Code","title":"Known issues"},{"location":"contribute/","text":"Please log any issues, suggestions, bugs, questions under GitHub Issues","title":"Contribute"},{"location":"edit/","text":"Disable Key-bindings \u00b6 fictionWriter.edit.disableKeybindings Disables the following keybindings added by this extension: - Enter , Shift + Enter , Del , Backspace , Tab ) Note: If disabled , some of the other features, that depend or ar triggered by this keybindings will be disabled (eg. easy Paragraph Creation needs Enter end Shift + Enter in order to work properly). Easy Paragraph Creation \u00b6 fictionWriter.edit.easyParagraphCreation To create paragraphs in markdown, you need to add an extra empty line. That, usually, means pressing Enter key twice. With this setting, you can easily create new paragraphs by hitting one key only (or a combination). It has two options: Enter : pressing Enter once will add two line-breaks, and pressing Shift + Enter will add one line-break. Shift+Enter : pressing Enter once will add one line-break, but Shift + Enter will add two line-breaks. Writing Dialogues \u00b6 This is a proposed solution for writing dialogue. In some languages, dialogue is not marked by quotation marks, but is marked only at the beginning a dialogue line. For example, each line can start with em-dash (\u2014), like so: The Time Machine, by H. G. Wells \u2014 You mean to say that that machine has travelled into the future? said Filby. \u2014 Into the future or the past. I don\u2019t, for certain, know which. After an interval the Psychologist had an inspiration. \u2014 It must have gone into the past if it has gone anywhere, he said. Markdown can convert three dashes to em-dash and two dashes to en-dash. However, typing three dash character and one space is not necessarly convenient when writing lots of dialogue lines. A widespread practice is to write -- for an em-dash , and the text editor will automatically replace it. Selecting dialogue punctuation: \u00b6 fictionWriter.editDialogue.marker \"Hello,\" (quotes) default \u2014 Hello, (em-dash followed by one space) -- Hello , (two dashes followed by one space) --- Hello, (three dashes followed by one space) \u2014Hello, (em-dash, no space) --Hello, (two dashes, no space) ---Hello, (three dashes, no space With this feature, you can controlsthe punctuation used when writing dialogue. The following options are possible: Quotes: \"Hello,\" John said. ( default : this is equivalent with disabling all proposed dialogue features) Em-dash followed by one space: \u2014 Hello, John said. Two dashes followed by one space: -- Hello, John said. Three dashes followed by one space: --- Hello, John said. Em-dash, no space: \u2014Hello, John said. Two dashes, no space: -- Hello, John said. Three dashes, no space: --- Hello, John said. Once a dialogue marker is selected (other than quotes), the paragraph starting with that marker will be recognized as a dialogue paragraph enabeling other dialogue related features, like text formatting, auto replace, etc. Auto-replace dialogue markers \u00b6 fictionWriter.editDialogue.markerAutoReplace If enabled, typing -- followed by a space will insert the selected marker. Disable this feature if you do not want to auto-replace markers. Easily create new dialogue paragraphs \u00b6 Selecting a dialogue marker (other than quotes) changes the Easy Paragraph Creation behaviour as follows: if new paragraph is created (either by Shift + Enter or by Enter ), and is from a dialogue paragraph (meaning, the paragraph starts with a marker), then the next paragraph will automatically start with the selected dialogue marker. This makes writing alternative dialogue lines much faster. when hitting new line, if the only thing on that line is a dialogue marker, is automatically deleted. when hitting backspace, and the only thing in front of the cursor is the dialogue marker, the line will be cleared Using Dialgoue indents: \u00b6 Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) This is especially useful when using the one sentence per line technique. Thus, having sentences from the same dialogue separated by simple line-breaks. -- Hi, said the first dialogue line. I am here, on multiple lines. -- Hi, said the other dialogue line. I am also here. The two lines continued their chat. fictionWriter.editDialogue.sentenceIndent The indent can be manually set under Edit Dialouge - Sentence Indent . fictionWriter.editDialogue.sentenceIndentAutoDetect If Edit Dialogue: Sentence Indent Auto-Detect is enabled, the indent will be automatically calculated based on the selected dialogue marker, and the previous setting will be ignored. Example: -- Hi, this is a dialogue. It uses two dashes and one space. Thus, it has a 3 space indent. \u2014 Hi, this uses em-dash and one space. It has just a two space indent.","title":"Text Editing"},{"location":"edit/#disable-key-bindings","text":"fictionWriter.edit.disableKeybindings Disables the following keybindings added by this extension: - Enter , Shift + Enter , Del , Backspace , Tab ) Note: If disabled , some of the other features, that depend or ar triggered by this keybindings will be disabled (eg. easy Paragraph Creation needs Enter end Shift + Enter in order to work properly).","title":"Disable Key-bindings"},{"location":"edit/#easy-paragraph-creation","text":"fictionWriter.edit.easyParagraphCreation To create paragraphs in markdown, you need to add an extra empty line. That, usually, means pressing Enter key twice. With this setting, you can easily create new paragraphs by hitting one key only (or a combination). It has two options: Enter : pressing Enter once will add two line-breaks, and pressing Shift + Enter will add one line-break. Shift+Enter : pressing Enter once will add one line-break, but Shift + Enter will add two line-breaks.","title":"Easy Paragraph Creation"},{"location":"edit/#writing-dialogues","text":"This is a proposed solution for writing dialogue. In some languages, dialogue is not marked by quotation marks, but is marked only at the beginning a dialogue line. For example, each line can start with em-dash (\u2014), like so: The Time Machine, by H. G. Wells \u2014 You mean to say that that machine has travelled into the future? said Filby. \u2014 Into the future or the past. I don\u2019t, for certain, know which. After an interval the Psychologist had an inspiration. \u2014 It must have gone into the past if it has gone anywhere, he said. Markdown can convert three dashes to em-dash and two dashes to en-dash. However, typing three dash character and one space is not necessarly convenient when writing lots of dialogue lines. A widespread practice is to write -- for an em-dash , and the text editor will automatically replace it.","title":"Writing Dialogues"},{"location":"edit/#selecting-dialogue-punctuation","text":"fictionWriter.editDialogue.marker \"Hello,\" (quotes) default \u2014 Hello, (em-dash followed by one space) -- Hello , (two dashes followed by one space) --- Hello, (three dashes followed by one space) \u2014Hello, (em-dash, no space) --Hello, (two dashes, no space) ---Hello, (three dashes, no space With this feature, you can controlsthe punctuation used when writing dialogue. The following options are possible: Quotes: \"Hello,\" John said. ( default : this is equivalent with disabling all proposed dialogue features) Em-dash followed by one space: \u2014 Hello, John said. Two dashes followed by one space: -- Hello, John said. Three dashes followed by one space: --- Hello, John said. Em-dash, no space: \u2014Hello, John said. Two dashes, no space: -- Hello, John said. Three dashes, no space: --- Hello, John said. Once a dialogue marker is selected (other than quotes), the paragraph starting with that marker will be recognized as a dialogue paragraph enabeling other dialogue related features, like text formatting, auto replace, etc.","title":"Selecting dialogue punctuation:"},{"location":"edit/#auto-replace-dialogue-markers","text":"fictionWriter.editDialogue.markerAutoReplace If enabled, typing -- followed by a space will insert the selected marker. Disable this feature if you do not want to auto-replace markers.","title":"Auto-replace dialogue markers"},{"location":"edit/#easily-create-new-dialogue-paragraphs","text":"Selecting a dialogue marker (other than quotes) changes the Easy Paragraph Creation behaviour as follows: if new paragraph is created (either by Shift + Enter or by Enter ), and is from a dialogue paragraph (meaning, the paragraph starts with a marker), then the next paragraph will automatically start with the selected dialogue marker. This makes writing alternative dialogue lines much faster. when hitting new line, if the only thing on that line is a dialogue marker, is automatically deleted. when hitting backspace, and the only thing in front of the cursor is the dialogue marker, the line will be cleared","title":"Easily create new dialogue paragraphs"},{"location":"edit/#using-dialgoue-indents","text":"Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) This is especially useful when using the one sentence per line technique. Thus, having sentences from the same dialogue separated by simple line-breaks. -- Hi, said the first dialogue line. I am here, on multiple lines. -- Hi, said the other dialogue line. I am also here. The two lines continued their chat. fictionWriter.editDialogue.sentenceIndent The indent can be manually set under Edit Dialouge - Sentence Indent . fictionWriter.editDialogue.sentenceIndentAutoDetect If Edit Dialogue: Sentence Indent Auto-Detect is enabled, the indent will be automatically calculated based on the selected dialogue marker, and the previous setting will be ignored. Example: -- Hi, this is a dialogue. It uses two dashes and one space. Thus, it has a 3 space indent. \u2014 Hi, this uses em-dash and one space. It has just a two space indent.","title":"Using Dialgoue indents:"},{"location":"export/","text":"Fiction Writer helps you export markdown documents to other formats, by integrating Pandoc in the writing flow. Requirements \u00b6 Important! If you want to compile .md to other document formats using this extension, you need to have Pandoc installed on your machine, and configured to run from command line! Pandoc is a universal document converter, that understands a large number of useful markdown syntax extensions, including document metadata (title, author, date); footnotes; tables; etc. You can get it from here: Installing pandoc . You can test that pandoc is properly installed by opening your prefered command-line app and running: pandoc --version You should get an output similar to: pandoc 2.11.4 Compiled with pandoc-types 1.22, texmath 0.12.1, skylighting 0.10.2, citeproc 0.3.0.5, ipynb 0.1.0.1 User data directory: C:\\Users\\YourUserName\\AppData\\Roaming\\pandoc Copyright (C) 2006-2021 John MacFarlane. Web: https://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose. Markdown flavors - COMING IN NEXT ALPHA RELEASE \u00b6 As exporting is done by using Pandoc, all Pandoc related markdown flavors can be used. Note that Pandoc already includes a list of enabled extensions. You can read more about these here Pandoc's Markdown . There are some extensions that are not included by default, but they can be enabled via settings panel. Read more about the following extensions here: Non Pandc Extensions attributes : allows attributes to be attached to any inline or block-level element. old_dashes : Selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes: - before a numeral is an en-dash, and -- is an em-dash. This option only has an effect if smart is enabled. angle_brackets_escapable : Allow < and > to be backslash-escaped lists_without_preceding_blankline : Allow a list to occur right after a paragraph, with no intervening blank space. four_space_rule : Selects the pandoc <= 2.0 behavior for parsing lists, so that four spaces indent are needed for list item continuation paragraphs. spaced_reference_links : Allow whitespace between the two components of a reference link, for example, hard_line_breaks : Causes all newlines within a paragraph to be interpreted as hard line breaks instead of spaces. ignore_line_breaks : Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks. east_asian_line_breaks : Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks emoji : Parses textual emojis like as Unicode emoticons. tex_math_single_backslash : Causes anything between \\( and \\) to be interpreted as inline TeX math, and anything between \\[ and \\] to be interpreted as display TeX math. tex_math_double_backslash : Causes anything between \\\\( and \\\\) to be interpreted as inline TeX math, and anything between \\\\[ and \\\\] to be interpreted as display TeX math. markdown_attribute : Markdown is only parsed inside block-level tags if the tags have the attribute markdown=1 . mmd_title_block : Enables a MultiMarkdown style title block at the top of the document. If pandoc_title_block or yaml_metadata_block is enabled, it will take precedence over mmd_title_block . abbreviations : Parses PHP Markdown Extra abbreviation keys, like autolink_bare_uris : Makes all absolute URIs into links, even when not surrounded by pointy braces <...>. mmd_link_attributes : Parses multimarkdown style key-value attributes on link and image references. This extension should not be confused with the link_attributes extension. mmd_header_identifiers : Parses multimarkdown style heading identifiers (in square brackets, after the heading but before any trailing #s in an ATX heading). compact_definition_lists : Activates the definition list syntax of pandoc 1.12.x and earlier. gutenberg : Use Project Gutenberg conventions for plain output: all-caps for strong emphasis, surround by underscores for regular emphasis, add extra blank space around headings. sourcepos : Include source position attributes when parsing commonmark. For elements that accept attributes, a data-pos attribute is added; other elements are placed in a surrounding Div or Span elemnet with a data-pos attribute. Including other documents \u00b6 Export > Include: Enabled Key: fictionWriter.export.include.enabled Enables the include file functionality Default: enabled This extension adds support for combining multiple markdown documents into one. You can use the following syntax {file_to_include.md} the the contents of file_to_include.md will be added in the exported document. Specifying included files can be done in multiple ways. Include by aboslute or relative path \u00b6 A valid path to the file: like a relative path { my_file.md } or { relative/path/to/my_file.md } or an absolute path { c : \\MyBook\\Chapter1\\my_file.md } Include by metadata id \u00b6 This is the recommended way to include files, as it does not depend on the filename If the document has a metadata block with id top level field, this can be used in the include file syntax {} For example, if my_file.md has the following contents: --- id : prologue --- Prologue begins here... You can include it in another file like this: # Prologue { prologue } Resolve document id \u00b6 Export > Include: Search Document Ids in All Opened Files And Workspaces Key: fictionWriter.export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces Default: disabled if you opt to include a file by id , and not by relative or absolute path, you have the option to search for that id only in the document workspace folder, or in all opened documents or worskpaces in Visual Studio Code. By default, this option is disabled Include errors \u00b6 Export > Include: Show Errors in Output File Key: fictionWriter.export.include.showsErrorInOutputFile Adds errors to the compiled document. Default: enabled If, during the export process, some errors occured, they will be shown in a warning message before the actual export takes place. You can choose to continue (with errors) or cancel the operation. By default, include errors are visible in the exported document in Error paragraphs, like this: Disable this option if you want to never see errors in exported document. The toc document \u00b6 A common practice is to have just one TOC document, where you include all other documents. A simple toc.md document can look like this: { chapter01.md } { chapter02.md } { chapter03.md } { chapter04.md } This will include all 4 referenced files. Of course a TOC document can contain any additional markdown syntax: # My Book Title ## Preface Some opening words ## Chapter One {chapter01.md} ## Chapter Tso {chapter02.md} ## The End This is the end. If {chapter01.md} does not exist, you will get a warning message, but the exporting can still continue with the other documents. For example, the toc.md from the following directory: . \u251c\u2500 toc.md \u251c\u2500 prologue.md \u251c\u2500 part1 \u2502 \u251c\u2500 ch1.md \u2502 \u251c\u2500 ch2.md \u2502 \u2514\u2500 ch3.md \u251c\u2500 part2/ \u2502 \u251c\u2500 ch4.md/ \u2502 \u2514\u2500 ch5.md \u2514\u2500 epilogue.md could look like: {prologue.md} {part1\\ch1.md} {part1\\ch2.md} {part1\\ch3.md} {part2\\ch4.md} {part2\\ch5.md} {epilogue.md} Commands \u00b6 Compile Current File \u00b6 documentation coming soon... Compile Selected files \u00b6 Compiles all selected markdown documents (having .md extension) from current directory, into one file. The include order is filename order. documentation coming soon... Compile TOC \u00b6 Exports the TOC file. A TOC file is a simple .md file that serves as a table of contents for exporting. The file-name can be configured under fictionWriter.export.tocFilename . By default, the toc.md file-name will be used. If the TOC file is searched for in two locations: first, in the same folder as the opened document second, in the workspace root. If no TOC files is found in either location, then compile will fail. Example: . \u251c\u2500 toc.md # The toc.md in workspace root \u251c\u2500 part1 \u2502 \u251c\u2500 chapter1.md \u2502 \u251c\u2500 chapter2.md \u2502 \u2514\u2500 toc.md # The toc.md from part.1 \u251c\u2500 part2/ \u2502 \u251c\u2500 chapter3.md/ \u2502 \u2514\u2500 chapter4.md if chapter1.md is opened, and Compile toc.md command is run, then /part1/toc.md will be used. if chapter4.md is opened, and Compile toc.md command is run, then /toc.md from workspace root will be used.","title":"Exporting"},{"location":"export/#requirements","text":"Important! If you want to compile .md to other document formats using this extension, you need to have Pandoc installed on your machine, and configured to run from command line! Pandoc is a universal document converter, that understands a large number of useful markdown syntax extensions, including document metadata (title, author, date); footnotes; tables; etc. You can get it from here: Installing pandoc . You can test that pandoc is properly installed by opening your prefered command-line app and running: pandoc --version You should get an output similar to: pandoc 2.11.4 Compiled with pandoc-types 1.22, texmath 0.12.1, skylighting 0.10.2, citeproc 0.3.0.5, ipynb 0.1.0.1 User data directory: C:\\Users\\YourUserName\\AppData\\Roaming\\pandoc Copyright (C) 2006-2021 John MacFarlane. Web: https://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose.","title":"Requirements"},{"location":"export/#markdown-flavors-coming-in-next-alpha-release","text":"As exporting is done by using Pandoc, all Pandoc related markdown flavors can be used. Note that Pandoc already includes a list of enabled extensions. You can read more about these here Pandoc's Markdown . There are some extensions that are not included by default, but they can be enabled via settings panel. Read more about the following extensions here: Non Pandc Extensions attributes : allows attributes to be attached to any inline or block-level element. old_dashes : Selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes: - before a numeral is an en-dash, and -- is an em-dash. This option only has an effect if smart is enabled. angle_brackets_escapable : Allow < and > to be backslash-escaped lists_without_preceding_blankline : Allow a list to occur right after a paragraph, with no intervening blank space. four_space_rule : Selects the pandoc <= 2.0 behavior for parsing lists, so that four spaces indent are needed for list item continuation paragraphs. spaced_reference_links : Allow whitespace between the two components of a reference link, for example, hard_line_breaks : Causes all newlines within a paragraph to be interpreted as hard line breaks instead of spaces. ignore_line_breaks : Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks. east_asian_line_breaks : Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks emoji : Parses textual emojis like as Unicode emoticons. tex_math_single_backslash : Causes anything between \\( and \\) to be interpreted as inline TeX math, and anything between \\[ and \\] to be interpreted as display TeX math. tex_math_double_backslash : Causes anything between \\\\( and \\\\) to be interpreted as inline TeX math, and anything between \\\\[ and \\\\] to be interpreted as display TeX math. markdown_attribute : Markdown is only parsed inside block-level tags if the tags have the attribute markdown=1 . mmd_title_block : Enables a MultiMarkdown style title block at the top of the document. If pandoc_title_block or yaml_metadata_block is enabled, it will take precedence over mmd_title_block . abbreviations : Parses PHP Markdown Extra abbreviation keys, like autolink_bare_uris : Makes all absolute URIs into links, even when not surrounded by pointy braces <...>. mmd_link_attributes : Parses multimarkdown style key-value attributes on link and image references. This extension should not be confused with the link_attributes extension. mmd_header_identifiers : Parses multimarkdown style heading identifiers (in square brackets, after the heading but before any trailing #s in an ATX heading). compact_definition_lists : Activates the definition list syntax of pandoc 1.12.x and earlier. gutenberg : Use Project Gutenberg conventions for plain output: all-caps for strong emphasis, surround by underscores for regular emphasis, add extra blank space around headings. sourcepos : Include source position attributes when parsing commonmark. For elements that accept attributes, a data-pos attribute is added; other elements are placed in a surrounding Div or Span elemnet with a data-pos attribute.","title":"Markdown flavors - COMING IN NEXT ALPHA RELEASE"},{"location":"export/#including-other-documents","text":"Export > Include: Enabled Key: fictionWriter.export.include.enabled Enables the include file functionality Default: enabled This extension adds support for combining multiple markdown documents into one. You can use the following syntax {file_to_include.md} the the contents of file_to_include.md will be added in the exported document. Specifying included files can be done in multiple ways.","title":"Including other documents"},{"location":"export/#include-by-aboslute-or-relative-path","text":"A valid path to the file: like a relative path { my_file.md } or { relative/path/to/my_file.md } or an absolute path { c : \\MyBook\\Chapter1\\my_file.md }","title":"Include by aboslute or relative path"},{"location":"export/#include-by-metadata-id","text":"This is the recommended way to include files, as it does not depend on the filename If the document has a metadata block with id top level field, this can be used in the include file syntax {} For example, if my_file.md has the following contents: --- id : prologue --- Prologue begins here... You can include it in another file like this: # Prologue { prologue }","title":"Include by metadata id"},{"location":"export/#resolve-document-id","text":"Export > Include: Search Document Ids in All Opened Files And Workspaces Key: fictionWriter.export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces Default: disabled if you opt to include a file by id , and not by relative or absolute path, you have the option to search for that id only in the document workspace folder, or in all opened documents or worskpaces in Visual Studio Code. By default, this option is disabled","title":"Resolve document id"},{"location":"export/#include-errors","text":"Export > Include: Show Errors in Output File Key: fictionWriter.export.include.showsErrorInOutputFile Adds errors to the compiled document. Default: enabled If, during the export process, some errors occured, they will be shown in a warning message before the actual export takes place. You can choose to continue (with errors) or cancel the operation. By default, include errors are visible in the exported document in Error paragraphs, like this: Disable this option if you want to never see errors in exported document.","title":"Include errors"},{"location":"export/#the-toc-document","text":"A common practice is to have just one TOC document, where you include all other documents. A simple toc.md document can look like this: { chapter01.md } { chapter02.md } { chapter03.md } { chapter04.md } This will include all 4 referenced files. Of course a TOC document can contain any additional markdown syntax: # My Book Title ## Preface Some opening words ## Chapter One {chapter01.md} ## Chapter Tso {chapter02.md} ## The End This is the end. If {chapter01.md} does not exist, you will get a warning message, but the exporting can still continue with the other documents. For example, the toc.md from the following directory: . \u251c\u2500 toc.md \u251c\u2500 prologue.md \u251c\u2500 part1 \u2502 \u251c\u2500 ch1.md \u2502 \u251c\u2500 ch2.md \u2502 \u2514\u2500 ch3.md \u251c\u2500 part2/ \u2502 \u251c\u2500 ch4.md/ \u2502 \u2514\u2500 ch5.md \u2514\u2500 epilogue.md could look like: {prologue.md} {part1\\ch1.md} {part1\\ch2.md} {part1\\ch3.md} {part2\\ch4.md} {part2\\ch5.md} {epilogue.md}","title":"The toc document"},{"location":"export/#commands","text":"","title":"Commands"},{"location":"export/#compile-current-file","text":"documentation coming soon...","title":"Compile Current File"},{"location":"export/#compile-selected-files","text":"Compiles all selected markdown documents (having .md extension) from current directory, into one file. The include order is filename order. documentation coming soon...","title":"Compile Selected files"},{"location":"export/#compile-toc","text":"Exports the TOC file. A TOC file is a simple .md file that serves as a table of contents for exporting. The file-name can be configured under fictionWriter.export.tocFilename . By default, the toc.md file-name will be used. If the TOC file is searched for in two locations: first, in the same folder as the opened document second, in the workspace root. If no TOC files is found in either location, then compile will fail. Example: . \u251c\u2500 toc.md # The toc.md in workspace root \u251c\u2500 part1 \u2502 \u251c\u2500 chapter1.md \u2502 \u251c\u2500 chapter2.md \u2502 \u2514\u2500 toc.md # The toc.md from part.1 \u251c\u2500 part2/ \u2502 \u251c\u2500 chapter3.md/ \u2502 \u2514\u2500 chapter4.md if chapter1.md is opened, and Compile toc.md command is run, then /part1/toc.md will be used. if chapter4.md is opened, and Compile toc.md command is run, then /toc.md from workspace root will be used.","title":"Compile TOC"},{"location":"format/","text":"Document Formatting \u00b6 fictionWriter.textFormatting.enabled Enables all document formatting features. Experimental This is an experimental feature. It works by changing text in your document. Make sure you make a backup of your document before enabling this, or use is on drafts and test documents only. Remove extra spaces \u00b6 fictionWriter.textFormatting.removeExtraSpaces Removes multiple spaces (not at beginning or ending of lines), with one space. Before This is a text with a lot , of spaces. On multiple lines . Indents are not removed ! After This is a text with a lot, of spaces. On multiple lines. Indents are not removed! Remove Trailing Spaces \u00b6 fictionWriter.textFormatting.removeTrailingSpaces Removes all whitespace characters from line ends. Before This is a text. Having too much space at the end of each line. After This is a text. Having too much space at the end of each line. Fix Paragraph Breaks \u00b6 fictionWriter.textFormatting.fixParagraphBreaks none default Soft line-breaks As New Paragraph Soft line-breaks In Same Paragraph One Sentence Per Line Converts soft and hard breaks, depending on the selected behaviour: Soft line-breaks As New Paragraph \u00b6 combines soft breaks from same paragraph into one line. (joins multi-line paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break Soft line-breaks In Same Paragraph \u00b6 Converts soft line-breaks to hard line-breaks. The result is having an extra empty before each soft break. (multiple paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break One Sentence Per Line \u00b6 This is a technique used by some writers. It consists of writing each sentence from the same paragraph on a new line. Paragraphs are still marked with an empty line. If enabled, this setting does the following: - Splits each line in sentences (using the boundary characters: . ! ? ; : ) - Adds every sentence on a new line. - Keeps spacing between paragraphs. Before # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. After # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. Fix Paragraph Spacing \u00b6 fictionWriter.textFormatting.fixParagraphSpacing Normalizes space between different paragraph types (header, body, dialogue, ...) by adding a new line if needed. Before # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** After # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** Remove Extra Lines \u00b6 fictionWriter.textFormatting.removeExtraLines Reduces multiple empty lines (more than two), to a single empty line. Before And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** After And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** Fix Mismatch Dialogue Markers \u00b6 fictionWriter.textFormatting.fixMismatchDialogueMarkers If the currently selected dialogue marker is not quotes, then it replaces all known dialogue markers (not quotes) with the selected one. Before -- This text has mixed dialogue markers. --Some are without space. --- Yes, it has quite a lot. \u2014 It can be fixed. After \u2014 This text has mixed dialogue markers. \u2014 Some are without space. \u2014 Yes, it has quite a lot. \u2014 It can be fixed. Fix Dialogue Indents \u00b6 fictionWriter.textFormatting.fixDialogueIndents Replaces all dialogue indents (visible if one sentence per line technique is used) with the currently selected dialogue indent. This works only if fictionWriter.editDialogue.marker is not quotes , and fictionWriter.editDialogue.sentenceIndent is greater than 0, or fictionWriter.editDialogue.sentenceIndentAutoDetect is enabled Before This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched. After This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched.","title":"Formatting"},{"location":"format/#document-formatting","text":"fictionWriter.textFormatting.enabled Enables all document formatting features. Experimental This is an experimental feature. It works by changing text in your document. Make sure you make a backup of your document before enabling this, or use is on drafts and test documents only.","title":"Document Formatting"},{"location":"format/#remove-extra-spaces","text":"fictionWriter.textFormatting.removeExtraSpaces Removes multiple spaces (not at beginning or ending of lines), with one space. Before This is a text with a lot , of spaces. On multiple lines . Indents are not removed ! After This is a text with a lot, of spaces. On multiple lines. Indents are not removed!","title":"Remove extra spaces"},{"location":"format/#remove-trailing-spaces","text":"fictionWriter.textFormatting.removeTrailingSpaces Removes all whitespace characters from line ends. Before This is a text. Having too much space at the end of each line. After This is a text. Having too much space at the end of each line.","title":"Remove Trailing Spaces"},{"location":"format/#fix-paragraph-breaks","text":"fictionWriter.textFormatting.fixParagraphBreaks none default Soft line-breaks As New Paragraph Soft line-breaks In Same Paragraph One Sentence Per Line Converts soft and hard breaks, depending on the selected behaviour:","title":"Fix Paragraph Breaks"},{"location":"format/#soft-line-breaks-as-new-paragraph","text":"combines soft breaks from same paragraph into one line. (joins multi-line paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break","title":"Soft line-breaks As New Paragraph"},{"location":"format/#soft-line-breaks-in-same-paragraph","text":"Converts soft line-breaks to hard line-breaks. The result is having an extra empty before each soft break. (multiple paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break","title":"Soft line-breaks In Same Paragraph"},{"location":"format/#one-sentence-per-line","text":"This is a technique used by some writers. It consists of writing each sentence from the same paragraph on a new line. Paragraphs are still marked with an empty line. If enabled, this setting does the following: - Splits each line in sentences (using the boundary characters: . ! ? ; : ) - Adds every sentence on a new line. - Keeps spacing between paragraphs. Before # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. After # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it.","title":"One Sentence Per Line"},{"location":"format/#fix-paragraph-spacing","text":"fictionWriter.textFormatting.fixParagraphSpacing Normalizes space between different paragraph types (header, body, dialogue, ...) by adding a new line if needed. Before # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** After # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. ***","title":"Fix Paragraph Spacing"},{"location":"format/#remove-extra-lines","text":"fictionWriter.textFormatting.removeExtraLines Reduces multiple empty lines (more than two), to a single empty line. Before And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** After And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. ***","title":"Remove Extra Lines"},{"location":"format/#fix-mismatch-dialogue-markers","text":"fictionWriter.textFormatting.fixMismatchDialogueMarkers If the currently selected dialogue marker is not quotes, then it replaces all known dialogue markers (not quotes) with the selected one. Before -- This text has mixed dialogue markers. --Some are without space. --- Yes, it has quite a lot. \u2014 It can be fixed. After \u2014 This text has mixed dialogue markers. \u2014 Some are without space. \u2014 Yes, it has quite a lot. \u2014 It can be fixed.","title":"Fix Mismatch Dialogue Markers"},{"location":"format/#fix-dialogue-indents","text":"fictionWriter.textFormatting.fixDialogueIndents Replaces all dialogue indents (visible if one sentence per line technique is used) with the currently selected dialogue indent. This works only if fictionWriter.editDialogue.marker is not quotes , and fictionWriter.editDialogue.sentenceIndent is greater than 0, or fictionWriter.editDialogue.sentenceIndentAutoDetect is enabled Before This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched. After This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched.","title":"Fix Dialogue Indents"},{"location":"metadata/","text":"Quick overview: (1) : The yaml metadata block. The first thing in the document. (2) : The Metadata tree view. Parses the metadata block. (3) : Assign keyword badges: Rake has the badge RK , shown in Explorer . It also is part of pov category, visible in Metadata view (4) : Assigned keyword colors: done has the color green, visible as icon color in Metadata and as file color in Explorer . The 04 - A door is opened.md has the tag rev1 that has the yellow color. Metadata: Enabled Key: config.fictionWriter.metadata.enabled Enables/disables all metadata related features described in this section. Default: enabled Adding Metadata \u00b6 Fiction Writer understands yaml markdown metadata. To use metadata blocks with Fiction Writer , you need to: add the metadata block on the top of the document (no even an empty line before the beginning of text) separate the block with --- and end the block with --- or ... , each one on a separate line. follow yaml structure e.g. --- title : The Fictional Adventures of Fiction Writer status : draft tags : [ red , green , blue ] --- It was a cold and starry night... Note As this extension uses Pandoc to export documents, keep in mind that Pandoc also parses, and understands, markdown metadata. Read more about what kind of metadata is supported by Pandoc here: Metadata blocks . Terminology \u00b6 In the context of metadata, this extension uses the following wording: metadata category : the label/fieldname on the 1 st level of metadata. metadata keyword : any word in the label/field value of a metadata category, anyware in the metadata tree. in the following example, title , status and tags are metadata categories , and draft , red , green , blue , Main Title are keywords : --- title : Main Title status : draft tags : [ red , green , blue ] --- Known Metadata \u00b6 You can add any metadata category or keyword, but some categories are recognized (and used) by Fiction Writer : id category: used to uniquely identify a file during include/export process . You can either specify a file by path/filename or by this metadata id property. --- id : myFile --- My file contents... More information here . summary category: used to show a short description in Explorer tooltip and in the Metadata View as the first message above metadata tree. --- summary : Where we find about the summary category. --- My file contents... The Metadata View \u00b6 For all known documents (in this case, markdown) that contain yaml metadata, the Metadata View will be enabled in the Explorer . The view parses known metadata, and displays it as a tree. It optionally can include icons, or colors. yaml Exceptions \u00b6 Easy Lists \u00b6 Metadata: Easy Lists Key: fictionWriter.metadata.easyLists Under Metadata: Easy Lists , you can configure if you want to split metadata values by a specific character. The default value is comma ( , ), that means each comma separated item will be treated as a list item. To disable this setting, just leave the Metadata: Easy Lists value blank. Although lists (arrays) in yaml are defined like: --- items : - item1 - item2 - item3 --- or like --- items : [ item1 , item2 , item3 ] --- to make writing lists easyer, Fiction Writer can split a text value into a list, by a configured item separator. So, the, previous example could be written like so: --- items : item1, item2, item3 --- if the separator is , . The separator is configurable under Metadata: Easy Lists . Note This is only if the category is a known category , meaning: the category is added to the Category icons list, explained below. Spaces are not trimmed If this feature does not behave as expected, make sure that the separator value does not include unwanted spaces. Especially at the beginning or end. Default categories \u00b6 Metadata: Default Category Key: fictionWriter.metadata.defaultCategory You can configure the default category you want uncategorized items to be assigned to. To disable this feature, just leave the default category name empty. If you quickly want to categorize a document, you can write only the keyword or keywords between the metadata block markers, like so: --- item1, item2, item3 --- or even --- draft --- This will automatically add these items to the configured Default Category e.g. If the Default Category is status , then the above blocks will be similar to: --- status : [ item1 , item2 , item3 ] --- --- status : draft --- Icons \u00b6 Metadata > Categories: Icons Key: fictionWriter.metadata.categories.icons Predefined category icons, with the possiblity to add any number of new ones. Sets icons for categories in the Metadata View . Only icons from VSCode Product Icon Reference are supported. Add your custom category name to the Metadata > Categories: Icons list ( Item ) and set it's value to the icon id from Product Icon Reference. (Eg. tag , eye , book ). There are some predefined icons and categories. If you want, you can easily change any predefined icon by editing it's value. All categories from this list, are treated as known categories . This means, they will support the Easy Lists functionality. Note If you just want to add a category as known category , add it to this list, but leave the Icon ( Value ) field empty. Disable category icons or names \u00b6 You can completely disable icons, by unchecking Metadata > Category: Show Icons Metadata > Categories: Show Icons Key: fictionWriter.metadata.categories.showIcons Shows category icons in the Metadata view. Disable this if you do not want to view any icons. Default value: enabled If you want, you can also hide category labels (only for 1 st level/root categories) by unchecking Metadata > Category: Show Names Metadata > Category: Show Names Key: fictionWriter.metadata.categories.showNames Default value: enabled File Explorer Badges \u00b6 Visual studio code File Explorer has the possibility of showing 1-2 character badges near a document. Of course, multiple extensions already contribute to this functionality, but you can also make Fiction Writer add additional badges based on metadata keywords. A mapping between metadata keywords and the displayed badge can be set in Fiction Writer settings. Metadata > Keywords: Badges Key: fictionWriter.metadata.keywords.badges To define a badge following this steps: Step 1: Define a new mapping in Settings, under Metadata: Keyword: Badges . Example rev2 is R2 Step 2: Add metadata to your document. Example: tag: rev2 Step 3: Inspect Explorer . You should see R2 badge for your document. Note When resolving kewyord/badge mappings, only the first match will be used. So, if you have defined multiple keyword mappings, only one can be shown in file explorer. For example, if you define the following metadata block and have mappings: done -> OK and rev -> R1 : --- tag : rev1 state : done --- rev1 -> R1 will be used, as rev1 is the first match found. Metadata > Keywords: Badge Category Key: fictionWriter.metadata.keywords.badgeCategory Default value: empty By default, all metadata keywords are considered when searching for badge mappings. If you want to restrict the search for only one category, you can specify a 1 st level category name under Metadata > Keywords: Badge Categosry and only that will be considered. Considering the above example, where we have mappings between: done -> OK and rev -> R1 : --- tag : rev1 state : done --- if, the Metadata > Keywords: Badge Category is set to state , then done -> OK will be used, as done is the first match found under the state category. Metadata > Keywords: Badges in File Explorer Key: fictionWriter.metadata.keywords.badgesInFileExplorer Default value: enabled Keywords and Colors \u00b6 fictionWriter.metadata.keywords.colors documentation coming soon... fictionWriter.metadata.keywords.colorCategory documentation coming soon... fictionWriter.metadata.keywords.colorsInMetadataView documentation coming soon... fictionWriter.metadata.keywords.colorsInFileExplorer documentation coming soon... External Metadata \u00b6 Fiction Writer supports reading file metadata from a separate .yml file. Matching between a fiction ( .md ) file and the ( .yml ) file is done by the same naming convention used for all related files: Related File must have the same name of the .md file (including the extension) + the specific file extension (in this case .yml . They also need to be in the same location Recognized related metadata files . \u251c\u2500 chapter01.md \u2514\u2500 chapter01.md.yml Not Recognized metadata files . \u251c\u2500 chapter01.md \u251c\u2500 chapter01.yml // missing .md \u251c\u2500 chapter1.md.yml // missing 01 \u2514\u2500 chapter01.md.yaml // yaml instead of yml Note The order in which metadata is resolved is this: first look in the .md file. If no metadata block is present, then search for external .yml file in same directory.","title":"Metadata"},{"location":"metadata/#adding-metadata","text":"Fiction Writer understands yaml markdown metadata. To use metadata blocks with Fiction Writer , you need to: add the metadata block on the top of the document (no even an empty line before the beginning of text) separate the block with --- and end the block with --- or ... , each one on a separate line. follow yaml structure e.g. --- title : The Fictional Adventures of Fiction Writer status : draft tags : [ red , green , blue ] --- It was a cold and starry night... Note As this extension uses Pandoc to export documents, keep in mind that Pandoc also parses, and understands, markdown metadata. Read more about what kind of metadata is supported by Pandoc here: Metadata blocks .","title":"Adding Metadata"},{"location":"metadata/#terminology","text":"In the context of metadata, this extension uses the following wording: metadata category : the label/fieldname on the 1 st level of metadata. metadata keyword : any word in the label/field value of a metadata category, anyware in the metadata tree. in the following example, title , status and tags are metadata categories , and draft , red , green , blue , Main Title are keywords : --- title : Main Title status : draft tags : [ red , green , blue ] ---","title":"Terminology"},{"location":"metadata/#known-metadata","text":"You can add any metadata category or keyword, but some categories are recognized (and used) by Fiction Writer : id category: used to uniquely identify a file during include/export process . You can either specify a file by path/filename or by this metadata id property. --- id : myFile --- My file contents... More information here . summary category: used to show a short description in Explorer tooltip and in the Metadata View as the first message above metadata tree. --- summary : Where we find about the summary category. --- My file contents...","title":"Known Metadata"},{"location":"metadata/#the-metadata-view","text":"For all known documents (in this case, markdown) that contain yaml metadata, the Metadata View will be enabled in the Explorer . The view parses known metadata, and displays it as a tree. It optionally can include icons, or colors.","title":"The Metadata View"},{"location":"metadata/#yaml-exceptions","text":"","title":"yaml Exceptions"},{"location":"metadata/#easy-lists","text":"Metadata: Easy Lists Key: fictionWriter.metadata.easyLists Under Metadata: Easy Lists , you can configure if you want to split metadata values by a specific character. The default value is comma ( , ), that means each comma separated item will be treated as a list item. To disable this setting, just leave the Metadata: Easy Lists value blank. Although lists (arrays) in yaml are defined like: --- items : - item1 - item2 - item3 --- or like --- items : [ item1 , item2 , item3 ] --- to make writing lists easyer, Fiction Writer can split a text value into a list, by a configured item separator. So, the, previous example could be written like so: --- items : item1, item2, item3 --- if the separator is , . The separator is configurable under Metadata: Easy Lists . Note This is only if the category is a known category , meaning: the category is added to the Category icons list, explained below. Spaces are not trimmed If this feature does not behave as expected, make sure that the separator value does not include unwanted spaces. Especially at the beginning or end.","title":"Easy Lists"},{"location":"metadata/#default-categories","text":"Metadata: Default Category Key: fictionWriter.metadata.defaultCategory You can configure the default category you want uncategorized items to be assigned to. To disable this feature, just leave the default category name empty. If you quickly want to categorize a document, you can write only the keyword or keywords between the metadata block markers, like so: --- item1, item2, item3 --- or even --- draft --- This will automatically add these items to the configured Default Category e.g. If the Default Category is status , then the above blocks will be similar to: --- status : [ item1 , item2 , item3 ] --- --- status : draft ---","title":"Default categories"},{"location":"metadata/#icons","text":"Metadata > Categories: Icons Key: fictionWriter.metadata.categories.icons Predefined category icons, with the possiblity to add any number of new ones. Sets icons for categories in the Metadata View . Only icons from VSCode Product Icon Reference are supported. Add your custom category name to the Metadata > Categories: Icons list ( Item ) and set it's value to the icon id from Product Icon Reference. (Eg. tag , eye , book ). There are some predefined icons and categories. If you want, you can easily change any predefined icon by editing it's value. All categories from this list, are treated as known categories . This means, they will support the Easy Lists functionality. Note If you just want to add a category as known category , add it to this list, but leave the Icon ( Value ) field empty.","title":"Icons"},{"location":"metadata/#disable-category-icons-or-names","text":"You can completely disable icons, by unchecking Metadata > Category: Show Icons Metadata > Categories: Show Icons Key: fictionWriter.metadata.categories.showIcons Shows category icons in the Metadata view. Disable this if you do not want to view any icons. Default value: enabled If you want, you can also hide category labels (only for 1 st level/root categories) by unchecking Metadata > Category: Show Names Metadata > Category: Show Names Key: fictionWriter.metadata.categories.showNames Default value: enabled","title":"Disable category icons or names"},{"location":"metadata/#file-explorer-badges","text":"Visual studio code File Explorer has the possibility of showing 1-2 character badges near a document. Of course, multiple extensions already contribute to this functionality, but you can also make Fiction Writer add additional badges based on metadata keywords. A mapping between metadata keywords and the displayed badge can be set in Fiction Writer settings. Metadata > Keywords: Badges Key: fictionWriter.metadata.keywords.badges To define a badge following this steps: Step 1: Define a new mapping in Settings, under Metadata: Keyword: Badges . Example rev2 is R2 Step 2: Add metadata to your document. Example: tag: rev2 Step 3: Inspect Explorer . You should see R2 badge for your document. Note When resolving kewyord/badge mappings, only the first match will be used. So, if you have defined multiple keyword mappings, only one can be shown in file explorer. For example, if you define the following metadata block and have mappings: done -> OK and rev -> R1 : --- tag : rev1 state : done --- rev1 -> R1 will be used, as rev1 is the first match found. Metadata > Keywords: Badge Category Key: fictionWriter.metadata.keywords.badgeCategory Default value: empty By default, all metadata keywords are considered when searching for badge mappings. If you want to restrict the search for only one category, you can specify a 1 st level category name under Metadata > Keywords: Badge Categosry and only that will be considered. Considering the above example, where we have mappings between: done -> OK and rev -> R1 : --- tag : rev1 state : done --- if, the Metadata > Keywords: Badge Category is set to state , then done -> OK will be used, as done is the first match found under the state category. Metadata > Keywords: Badges in File Explorer Key: fictionWriter.metadata.keywords.badgesInFileExplorer Default value: enabled","title":"File Explorer Badges"},{"location":"metadata/#keywords-and-colors","text":"fictionWriter.metadata.keywords.colors documentation coming soon... fictionWriter.metadata.keywords.colorCategory documentation coming soon... fictionWriter.metadata.keywords.colorsInMetadataView documentation coming soon... fictionWriter.metadata.keywords.colorsInFileExplorer documentation coming soon...","title":"Keywords and Colors"},{"location":"metadata/#external-metadata","text":"Fiction Writer supports reading file metadata from a separate .yml file. Matching between a fiction ( .md ) file and the ( .yml ) file is done by the same naming convention used for all related files: Related File must have the same name of the .md file (including the extension) + the specific file extension (in this case .yml . They also need to be in the same location Recognized related metadata files . \u251c\u2500 chapter01.md \u2514\u2500 chapter01.md.yml Not Recognized metadata files . \u251c\u2500 chapter01.md \u251c\u2500 chapter01.yml // missing .md \u251c\u2500 chapter1.md.yml // missing 01 \u2514\u2500 chapter01.md.yaml // yaml instead of yml Note The order in which metadata is resolved is this: first look in the .md file. If no metadata block is present, then search for external .yml file in same directory.","title":"External Metadata"},{"location":"notes/","text":"Notes: Enabled Key: config.fictionWriter.notes.enabled Enables/disables notes quick view. Default: enabled Quick Document Notes \u00b6 Fiction Writer supports showing/editing/saving of quick notes files from a .txt document. (1) : The .md and .md.txt file group. (2) : The Notes View for editing text notes. (3) : Open current file in Text Editor (4) : Pin current notes file (not changed when switching open document) (5) : Save changes to notes file These files are intendend to keep short notes (thus the plain text .txt format) about specific .md files. Matching between a fiction ( .md ) file and the ( .txt ) file is done by the same naming convention used for all related files: Related File must have the same name of the .md file (including the extension) + the specific file extension (in this case .txt . They also need to be in the same location Recognized related notes files . \u251c\u2500 chapter01.md \u2514\u2500 chapter01.md.txt Not Recognized Notes files . \u251c\u2500 chapter01.md \u251c\u2500 chapter01.txt // missing .md \u2514\u2500 chapter01.md.txt // missing 01 The Notes View \u00b6 documentation coming soon... Adding Document Notes \u00b6 You can either manually create a file that follows the naming conventions described above, or use the Create New Note File button This will create a new note file for you, and will populate it with the default text set under Notes: Default Text section of the extension configuration. Notes: Default Text Key: fictionWriter.notes.defaultText Default: YOUR NOTES HERE As VS Code configuration does not support multiline text boxes, add each line as a new item in the defaultText array. Pin/UnPin notes \u00b6 When switching documents, the Notes View also changes the displayed file. If you want to always keep the same file in the Notes View , so you can quickly update/save the document notes, can pin the file to this view, but selecting the Pin icon. Now, when you switch documents, the notes file will not be changed. Note Modifying a pinned .md.txt file either in the active text editor, or in an external program, will result in the reloading of the Notes View . If you have changes in the view, you will be promted if you want to overwrite the notes. Save Notes \u00b6 documentation coming soon...","title":"Notes"},{"location":"notes/#quick-document-notes","text":"Fiction Writer supports showing/editing/saving of quick notes files from a .txt document. (1) : The .md and .md.txt file group. (2) : The Notes View for editing text notes. (3) : Open current file in Text Editor (4) : Pin current notes file (not changed when switching open document) (5) : Save changes to notes file These files are intendend to keep short notes (thus the plain text .txt format) about specific .md files. Matching between a fiction ( .md ) file and the ( .txt ) file is done by the same naming convention used for all related files: Related File must have the same name of the .md file (including the extension) + the specific file extension (in this case .txt . They also need to be in the same location Recognized related notes files . \u251c\u2500 chapter01.md \u2514\u2500 chapter01.md.txt Not Recognized Notes files . \u251c\u2500 chapter01.md \u251c\u2500 chapter01.txt // missing .md \u2514\u2500 chapter01.md.txt // missing 01","title":"Quick Document Notes"},{"location":"notes/#the-notes-view","text":"documentation coming soon...","title":"The Notes View"},{"location":"notes/#adding-document-notes","text":"You can either manually create a file that follows the naming conventions described above, or use the Create New Note File button This will create a new note file for you, and will populate it with the default text set under Notes: Default Text section of the extension configuration. Notes: Default Text Key: fictionWriter.notes.defaultText Default: YOUR NOTES HERE As VS Code configuration does not support multiline text boxes, add each line as a new item in the defaultText array.","title":"Adding Document Notes"},{"location":"notes/#pinunpin-notes","text":"When switching documents, the Notes View also changes the displayed file. If you want to always keep the same file in the Notes View , so you can quickly update/save the document notes, can pin the file to this view, but selecting the Pin icon. Now, when you switch documents, the notes file will not be changed. Note Modifying a pinned .md.txt file either in the active text editor, or in an external program, will result in the reloading of the Notes View . If you have changes in the view, you will be promted if you want to overwrite the notes.","title":"Pin/UnPin notes"},{"location":"notes/#save-notes","text":"documentation coming soon...","title":"Save Notes"},{"location":"settings/","text":"This extension has the following settings: Setting (prefixed by fictionWriter. ) Default Description edit.disableKeybindings false Disable editor keybindings added by this extension ( enter , shift+enter , delete , backspace , tab ). Note: If disabled , some of the settings will not work. Open Online Documentation edit.easyParagraphCreation Shift+Enter A new paragraph (two line breaks) will be created when pressing: editDialogue.marker -- Controls what punctuation is used when dialogue. editDialogue.markerAutoReplace true If anything other than quotes is selected, it automatically replaces the -- text at the begining of a new line, with the selected marker. editDialogue.sentenceIndent 3 Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) editDialogue.sentenceIndentAutoDetect true Sets the line indent from the same dialogue paragraph equal with the selected #editDialogue.marker# . export.include.enabled true If enabled , the {DOCUMENT_ID} or {document/file/path/filename.md} syntax can be used to include on .md file into another file export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces false When including files, search {DOCUMENT_ID} in all opened files and workspace folders. If disabled , it only searches in the workspace folder that the document belongs to. export.include.showsErrorInOutputFile true Shows errors in compiled document. export.outputFormat.alwaysShowFormatPicker false Select the output format each time an export command is run. If set to false , the selected #export.outputFormat.default# will be used. export.outputFormat.default odt The output document format. Important: This requires having Pandoc installed on your system, and available to be run from commandline. export.outputTemplate.enabled false If enabled, the template file selected at #export.outputTemplate.file# will be used when exporting to docx or odt formats. export.outputTemplate.file The output template to be used when exporting to docx or odt . Note: the template file extension must match the output type. It can be an absolut path, or relative to exported document. export.showSaveDialogue Always Control when the Save File Dialogue is shown. export.skipCodeComments true When parsing .md files, skips lines starting with // . export.smartDeshes true Converts -- to em-dash (\u2014) character in exported output. If not selected, it will default to en-dash (\u2013). Is PanDoc +old_dashes markdown extension. export.tocFilename toc.md The filename compiled by Compile TOC command. . metadata.categories.default tags Assigning keywords to this category, if none is specified. For example, if default category is tags , then the metadata block: --- draft, ch1 --- is equivalent to: --- tags : draft, ch1 --- metadata.categories.icons [object Object] Assign for each metadata category ( Item ) a vscode icon ( Value ) Note: You can use any icon from Product Icon Reference . metadata.categories.showIcons true Show icons in Metadata view. metadata.categories.showNames true If disabled , it hides category name in Metadata View for 1st level categories only. metadata.categories.summaryEnabled true If enabled , it will show the contents of the summary 1st level category in the message section of the Metadata View , and not in the tree itself. To use it, simply define a metadata block: --- summary: The document summary --- metadata.easyLists , Metadata values separated by this string, will be treated as list items. Enter the list item separator character below (or leave it empty to disable this feature) : Example: item1, item2, item three will be equivalent to [item1, item2, item three] if the separator is comma ( , ). metadata.enabled true It enables metadata reltated features. If disabled then all metadata related featueres will be disabled (parsing, metadata view, colors, etc...). Open Online Documentation metadata.keywords.badges [object Object] metadata.keywords.badgesCategory Uses only this category when resolving Explorer badges. (leave empty to do a full metadata search) Note: the first matched keyword in this category will dictate the badge. metadata.keywords.badgesInFileExplorer true Show Keyword Badges in Explorer view. Note: Only the first matched keyword will be considered. metadata.keywords.colors [object Object] Defines a keyword ( Item ) and associate a color ( Value ) to it. The colors can be visible in Metadata view or Explorer view. metadata.keywords.colorsCategory Uses only this category when resolving Explorer colors. (leave empty to do a full metadata search) Note: the first matched keyword in this category will dictate the color. metadata.keywords.colorsInFileExplorer true Use Keyword Colors in Explorer view. Note: Only the first matched keyword will be considered Note: file colors can be ovewritten by other extensions, so they might not show as expected. Also: #explorer.decorations.colors# must be enabled . metadata.keywords.colorsInMetadataView true Use Keyword Colors as icon colors in Metadata view. Note: if no icon is set/visible, then the color will not be visible. notes.defaultText Your Notes Here The default text for all new note files. Add each line as a new item . notes.enabled true Enables the notes view, that recognizes (and groups) .txt files together with .md and metadata files. Open Online Documentation smartRename.enabled true If enabled, allows ordering of files based on number prefix. smartRename.renameRelatedFiles Ask Every Time If enabled , renames/moves related ( .yml and .md ) files together. textFormatting.enabled true This is feature is EXPERIMENTAL . Make sure make a backup before trying it out. If enabled, it formats document using the selected formatters. Formatting is available with Format Document command.. [Open Online Documentation](https://zoctarine.github.io/vscode-fiction-writer/format/ textFormatting.fixDialogueIndents true If #editDialogue.marker# is not quotes, and #editDialogue.sentenceIndent# is enabled, reformats dialogue indents to selected dialogue indent. textFormatting.fixMismatchDialogueMarkers true If #editDialogue.marker# is not quotes, replaces mismatched markers with current selected marker. textFormatting.fixParagraphBreaks none Controls how paragraph breaks and soft line breaks will be formatted. textFormatting.fixParagraphSpacing true Normalizes space between different paragraph types (header, body, dialogue, ...). textFormatting.removeExtraLines true Reduces multiple empty lines (more than two), to a single empty line. textFormatting.removeExtraSpaces true Replaces multiple consecutive spaces with one single space. (not from begining or ending of line) textFormatting.removeTrailingSpaces true Remove all whitespace characters from line ends. view.fadeMetadata true Fade markdown metadata section by 50%. view.foldParagraphLines true Show folding marker for paragraphs with multiple lines. (soft-breaks) view.highlight.dialogueMarkers true Highlights the dialogue markers (---, --, \u2014 or quote marks symbols). view.highlight.textBetweenQuotes false Highlights all text between quotes. Usefull for highlighting dialogues (if quoted syntax is used) statusBar.enabled true Show the custom Fiction Writer status bar. statusBar.items {} Enable/disable items from Fiction Writer status Bar. view.wordWrapIndent 0 The hanging indent of wrapped lines. Select: - 0 for same indent as first line, - -1 for now wrapping indent, - any other value for hanging indent. Warning: Only works if #editor.wordWrap# is enabled, and might change the #editor.tabSize# setting for markdown . view.focusMode.opacity 0.5 Opacity for fade out text when focus mode is enabled writingMode.fontSize 16 The font size to be used in Writing Mode Mode. writingMode.theme The theme to be used in Writing Mode. (leave empty for no theme switch) writingMode.toggleFocusMode true When entering Writing Mode, it fades out all text except current text line (known as Focus Mode) splitDocument.switchToNewlyCreatedDocument true When splitting a document, immediately open (and switch to) the newly created doument in the text editor.","title":"Settings"},{"location":"shortcuts/","text":"Key Description Enter New line. Shift + Enter New paragraph (or new dialogue, if from a dialogue) Backspace Delete dialogue line, or dialogue indent. Otherise, works as normal Tab Adds dialogue indent, if in a dialogue paragraph. F9 Compile current document Ctrl + F9 Compile all documents from current folder Ctrl + Shift + F9 Compile the configured TOC file Shift + F11 Toggle Writing Mode Ctrl + F11 Toggle both Writing Mode and Zen Mode","title":"Keyboard Shortcuts"},{"location":"split/","text":"Fiction Writer helps you work with large files by splitting then in single ones There are several options for splitting files Split Document Here (at line) : will take everything from current line, to the end of the file and will move to another file Split Document Here (at cursor) : will take everithing from the cursor position, to the end of the file and will move it to another file Move Selected Text to New Document : will extract the selected text to a new file Naming \u00b6 When splitting, files will be named as follows: if there is no selected text, then the current document name will be taken, and an ending number will be added: Example: File: big_file.md Becomes: big_file.md and big_file-1.md If you continue splitting, the new files will be big_file-2.md, big_file-3.md, and so on... if you select a part of the text, that text will be the name of the new file: Example: File: big_file.md Selection: you select Chapter 1 text, and split Becomes: big_file.md and chapter_1.md (as the name is taken from the selection) Split Document: Switch To Newly Created Document` Key: fictionWriter.splitDocument.switchToNewlyCreatedDocument After splitting a file, immediatly open the new file in the editor, and switch to it. Default value: enabled Key Bindings \u00b6 Alt + K K : Shows the split document dialogue Alt + K L : Split document at line Alt + K X : Move selected text to new document","title":"Split"},{"location":"split/#naming","text":"When splitting, files will be named as follows: if there is no selected text, then the current document name will be taken, and an ending number will be added: Example: File: big_file.md Becomes: big_file.md and big_file-1.md If you continue splitting, the new files will be big_file-2.md, big_file-3.md, and so on... if you select a part of the text, that text will be the name of the new file: Example: File: big_file.md Selection: you select Chapter 1 text, and split Becomes: big_file.md and chapter_1.md (as the name is taken from the selection) Split Document: Switch To Newly Created Document` Key: fictionWriter.splitDocument.switchToNewlyCreatedDocument After splitting a file, immediatly open the new file in the editor, and switch to it. Default value: enabled","title":"Naming"},{"location":"split/#key-bindings","text":"Alt + K K : Shows the split document dialogue Alt + K L : Split document at line Alt + K X : Move selected text to new document","title":"Key Bindings"},{"location":"stats/","text":"Compute word frequency \u00b6 You can compute the repetition frequency of words and phrases up to 5 words. Get Writing Statistics \u00b6 Compute statistics like: word count characters (excluding spaces) characters (including spaces) estimates: word count (At 6 characters per word) lines (At 10 words per line) pages (At 24 lines per page) reading speed (at 200 wpm) Press the refresh button to compute statistics for the current open file. Writer Mode \u00b6 documentation coming soon... Status Bar \u00b6 fictionWriter.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"Text Statistics"},{"location":"stats/#compute-word-frequency","text":"You can compute the repetition frequency of words and phrases up to 5 words.","title":"Compute word frequency"},{"location":"stats/#get-writing-statistics","text":"Compute statistics like: word count characters (excluding spaces) characters (including spaces) estimates: word count (At 6 characters per word) lines (At 10 words per line) pages (At 24 lines per page) reading speed (at 200 wpm) Press the refresh button to compute statistics for the current open file.","title":"Get Writing Statistics"},{"location":"stats/#writer-mode","text":"documentation coming soon...","title":"Writer Mode"},{"location":"stats/#status-bar","text":"fictionWriter.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"Status Bar"},{"location":"view/","text":"Typewriter Mode \u00b6 documentation coming soon... Writing Mode \u00b6 Visual Studio Code, already has a great distraction free mode called Zen Mode . But, sometimes, you might prefer differnet font-size or a completely different theme when writing. Also, you might want to toggle multiple settings all at once, like TypeWriterMode or FocusMode. This is possible with Writing Mode. There are two keybindings Ctrl + F11 that will switch both Writing Mode and Zen Mode . It is just like pressing Shift + F11 followed by Ctrl + K Z and Shift + F11 that will switch only Writing Mode On or Off Writing Mode: Font Size Key: fictionWriter.writingMode.fontSize Default: 20 Font size can be set either by opening Settings view, or by using the Select Writing Mode Font Size Command Writing Mode: Theme Key: fictionWriter.writingMode.theme Default: empty The writing theme can also be set from settings, but is much easier to select it using the Select Writing Mode Theme Command, as it will display a drowpdown with all installed themes to choose from. Writing Mode: Toggle Focus Mode Key: fictionWriter.writingMode.toggleFocusMode Default: enabled You also have the option to switch to Focus Mode when entering writing mode, by setting Toggle Focus Mode Fold Paragraph lines \u00b6 Setting fictionWriter.view.foldSentences Separate lines from same paragraph can be folded/unfolded. This is specailly useful when OneSentencePerLine writing technique is used. Folding works for dialogue indents as well, if writing dialgoues with dialogue markers (like em-dash) is used: Syntax Highlighting \u00b6 Settings mfictionWriter.view.highlightDialogueMarkers fictionWriter.view.highlightDialogue Word Wrap Indent \u00b6 documentation coming soon... Status Bar \u00b6 fictionWriter.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"View"},{"location":"view/#typewriter-mode","text":"documentation coming soon...","title":"Typewriter Mode"},{"location":"view/#writing-mode","text":"Visual Studio Code, already has a great distraction free mode called Zen Mode . But, sometimes, you might prefer differnet font-size or a completely different theme when writing. Also, you might want to toggle multiple settings all at once, like TypeWriterMode or FocusMode. This is possible with Writing Mode. There are two keybindings Ctrl + F11 that will switch both Writing Mode and Zen Mode . It is just like pressing Shift + F11 followed by Ctrl + K Z and Shift + F11 that will switch only Writing Mode On or Off Writing Mode: Font Size Key: fictionWriter.writingMode.fontSize Default: 20 Font size can be set either by opening Settings view, or by using the Select Writing Mode Font Size Command Writing Mode: Theme Key: fictionWriter.writingMode.theme Default: empty The writing theme can also be set from settings, but is much easier to select it using the Select Writing Mode Theme Command, as it will display a drowpdown with all installed themes to choose from. Writing Mode: Toggle Focus Mode Key: fictionWriter.writingMode.toggleFocusMode Default: enabled You also have the option to switch to Focus Mode when entering writing mode, by setting Toggle Focus Mode","title":"Writing Mode"},{"location":"view/#fold-paragraph-lines","text":"Setting fictionWriter.view.foldSentences Separate lines from same paragraph can be folded/unfolded. This is specailly useful when OneSentencePerLine writing technique is used. Folding works for dialogue indents as well, if writing dialgoues with dialogue markers (like em-dash) is used:","title":"Fold Paragraph lines"},{"location":"view/#syntax-highlighting","text":"Settings mfictionWriter.view.highlightDialogueMarkers fictionWriter.view.highlightDialogue","title":"Syntax Highlighting"},{"location":"view/#word-wrap-indent","text":"documentation coming soon...","title":"Word Wrap Indent"},{"location":"view/#status-bar","text":"fictionWriter.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"Status Bar"},{"location":"writing/","text":"","title":"About Writing"}]}